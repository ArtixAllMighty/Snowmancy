package bl4ckscor3.mod.snowmancy;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import bl4ckscor3.mod.snowmancy.block.BlockEvercoldIce;
import bl4ckscor3.mod.snowmancy.block.BlockSnowmanBuilder;
import bl4ckscor3.mod.snowmancy.container.ContainerSnowmanBuilder;
import bl4ckscor3.mod.snowmancy.entity.EntitySnowmanCompanion;
import bl4ckscor3.mod.snowmancy.gui.GuiHandler;
import bl4ckscor3.mod.snowmancy.item.ItemBlockEvercoldIce;
import bl4ckscor3.mod.snowmancy.item.ItemFrozenSnowman;
import bl4ckscor3.mod.snowmancy.proxy.ServerProxy;
import bl4ckscor3.mod.snowmancy.tileentity.TileEntitySnowmanBuilder;
import net.minecraft.block.Block;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.ModelRegistryEvent;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.common.config.Config.Type;
import net.minecraftforge.common.config.ConfigManager;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.client.event.ConfigChangedEvent.OnConfigChangedEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.registry.EntityEntry;
import net.minecraftforge.fml.common.registry.EntityEntryBuilder;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;

@Mod(modid=Snowmancy.MODID, name=Snowmancy.NAME, version=Snowmancy.VERSION, acceptedMinecraftVersions=Snowmancy.MC_VERSION)
@EventBusSubscriber
public class Snowmancy
{
	public static final String MODID = "snowmancy";
	public static final String NAME = "Snowmancy";
	public static final String VERSION = "v1.0";
	public static final String MC_VERSION = "1.12";
	public static final String PREFIX = MODID + ":";
	@SidedProxy(clientSide="bl4ckscor3.mod.snowmancy.proxy.ClientProxy", serverSide="bl4ckscor3.mod.snowmancy.proxy.ServerProxy")
	public static ServerProxy proxy;
	@Instance(MODID)
	public static Snowmancy instance;

	@ObjectHolder(PREFIX + BlockSnowmanBuilder.NAME)
	public static Block SNOWMAN_BUILDER;
	@ObjectHolder(PREFIX + BlockEvercoldIce.NAME)
	public static Block EVERCOLD_ICE;
	@ObjectHolder(PREFIX + ItemFrozenSnowman.NAME)
	public static Item FROZEN_SNOWMAN;

	private static final List<ItemBlock> ITEM_BLOCKS_TO_REGISTER = new ArrayList<>();

	@EventHandler
	public void preInit(FMLPreInitializationEvent event)
	{
		ModMetadata modMeta = event.getModMetadata();

		modMeta.authorList = Arrays.asList("bl4ckscor3");
		modMeta.autogenerated = false;
		modMeta.description = "Build your own snowman companion!";

		NetworkRegistry.INSTANCE.registerGuiHandler(instance, new GuiHandler());
		Arrays.asList(Items.BOW,
				Items.DIAMOND_SWORD,
				Items.EGG,
				Items.GOLDEN_SWORD,
				Items.IRON_SWORD,
				Items.SNOWBALL,
				Items.STONE_SWORD,
				Items.WOODEN_SWORD).stream().forEach(ContainerSnowmanBuilder::registerWeapon);
	}

	@EventHandler
	public void init(FMLInitializationEvent event)
	{
		proxy.registerRenderers();
	}

	@SubscribeEvent
	public static void registerBlocks(RegistryEvent.Register<Block> event)
	{
		Block evercoldIce = new BlockEvercoldIce();

		registerBlock(event, new BlockSnowmanBuilder());
		registerBlock(event, evercoldIce, new ItemBlockEvercoldIce(evercoldIce));
		GameRegistry.registerTileEntity(TileEntitySnowmanBuilder.class, new ResourceLocation(MODID, NAME));
	}

	/**
	 * Registers a block and schedules the registering of its item block
	 * @param event The event holding the registry to register the block to
	 * @param block The block to register
	 */
	private static void registerBlock(RegistryEvent.Register<Block> event, Block block)
	{
		registerBlock(event, block, new ItemBlock(block));
	}

	/**
	 * Registers a block with a custom item block and schedules the registering of its item block
	 * @param event The event holding the registry to register the block to
	 * @param block The block to register
	 * @param itemBlock The item block to register
	 */
	private static void registerBlock(RegistryEvent.Register<Block> event, Block block, ItemBlock itemBlock)
	{
		event.getRegistry().register(block);
		itemBlock.setRegistryName(block.getRegistryName());
		ITEM_BLOCKS_TO_REGISTER.add(itemBlock);
	}

	@SubscribeEvent
	public static void registerItems(RegistryEvent.Register<Item> event)
	{
		ITEM_BLOCKS_TO_REGISTER.stream().forEach(event.getRegistry()::register);
		event.getRegistry().register(new ItemFrozenSnowman());
	}

	@SubscribeEvent
	public static void registerModels(ModelRegistryEvent event)
	{
		ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(SNOWMAN_BUILDER), 0, new ModelResourceLocation(new ResourceLocation(MODID, BlockSnowmanBuilder.NAME), "inventory"));
		ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(EVERCOLD_ICE), 0, new ModelResourceLocation(new ResourceLocation(MODID, BlockEvercoldIce.NAME), "inventory"));
		ModelLoader.setCustomModelResourceLocation(FROZEN_SNOWMAN, 0, new ModelResourceLocation(new ResourceLocation(MODID, ItemFrozenSnowman.NAME), "inventory"));
	}

	@SubscribeEvent
	public static void registerEntities(RegistryEvent.Register<EntityEntry> event)
	{
		event.getRegistry().register(EntityEntryBuilder.create()
				.id(new ResourceLocation(MODID, "snowman"), 0)
				.entity(EntitySnowmanCompanion.class)
				.name(PREFIX + "snowman")
				.tracker(128, 1, true).build());
	}

	@SubscribeEvent
	public static void onConfigChanged(OnConfigChangedEvent event)
	{
		if(event.getModID().equals(MODID))
			ConfigManager.sync(MODID, Type.INSTANCE);
	}
}
